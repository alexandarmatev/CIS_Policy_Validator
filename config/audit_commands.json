{
  "MacOS Ventura": [
    {
      "recommend_id": "1.1",
      "title": "Ensure All Apple-provided Software Is Current",
      "command": "/usr/bin/sudo /usr/sbin/softwareupdate -l",
      "expected_output": "No new software available."
    },
    {
      "recommend_id": "1.2",
      "title": "Ensure Auto Update Is Enabled",
      "command": "/usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS\n$.NSUserDefaults.alloc.initWithSuiteName('com.apple.SoftwareUpdate')\n.objectForKey('AutomaticCheckEnabled').js\nEOS",
      "expected_output": "true"
    },
    {
      "recommend_id": "1.3",
      "title": "Ensure Download New Updates When Available Is Enabled",
      "command": " /usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS\n$.NSUserDefaults.alloc.initWithSuiteName('com.apple.SoftwareUpdate')\n.objectForKey('AutomaticDownload').js\nEOS",
      "expected_output": "true"
    },
    {
      "recommend_id": "1.4",
      "title": "Ensure install of MacOS Updates is Enabled",
      "command": "/usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS\n$.NSUserDefaults.alloc.initWithSuiteName('com.apple.SoftwareUpdate')\n.objectForKey('AutomaticallyInstallMacOSUpdates').js\nEOS",
      "expected_output": "true"
    },
    {
      "recommend_id": "1.5",
      "title": "Ensure Install Application Updates from the App Store Is Enabled",
      "command": "/usr/bin/sudo /usr/bin/osascript -l JavaScript << 'EOS'\nfunction run() {\n let pref1 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.commerce')\n .objectForKey('AutoUpdate'));\n let pref2 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.SoftwareUpdate')\n .objectForKey('AutomaticallyInstallAppUpdates'));\n if ( pref1 == 1 || pref2 == 1 ) {\nreturn('true');\n} else {\nreturn('false');\n}\n}\nEOS",
      "expected_output": "true"
    },
    {
      "recommend_id": "1.6",
      "title": "Ensure Install Security Responses and System Files Is Enabled",
      "command": "/usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS\nfunction run() {\n let pref1 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.SoftwareUpdate')\\\n .objectForKey('ConfigDataInstall'))\n let pref2 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.SoftwareUpdate')\n .objectForKey('CriticalUpdateInstall'))\n if ( pref1 == 1 && pref2 == 1 ) {\nreturn(\"true\")\n} else {\n return(\"false\")\n }\n}\nEOS",
      "expected_output": "true"
    },
    {
      "recommend_id": "1.7",
      "title": "Ensure Software Update Deferment Is Less Than or Equal to 30 Days",
      "command": "result=$(/usr/bin/sudo /usr/bin/osascript -l JavaScript << 'EOS'\n$.NSUserDefaults.alloc.initWithSuiteName('com.apple.applicationaccess')\n .objectForKey('enforcedSoftwareUpdateDelay').js\nEOS\n)\n\nif [ -z \"$result\" ]; then\necho \"true\"\nelif [ \"$result\" -le 30 ]; then\necho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "1.8",
      "title": "Ensure the System is Managed by a Mobile Device Management (MDM) Software",
      "command": "sudo /usr/bin/profiles status -type enrollment | /usr/bin/awk -F: '/MDM enrollment/ {print $2}' | /usr/bin/grep -c \"Yes (User Approved)\"",
      "expected_output": "1"
    },
    {
      "recommend_id": "2.1.1.3",
      "title": "Ensure iCloud Drive Document and Desktop Sync Is Disabled",
      "command": "output=$(/usr/bin/sudo /usr/bin/osascript -l JavaScript <<EOS\n$.NSUserDefaults.alloc.initWithSuiteName('com.apple.applicationaccess').objectForKey('allowCloudDesktopAndDocuments').js\nEOS\n)\n\nif [ -z \"$output\" ]; then\noutput1=$(/usr/bin/sudo -u \"$(whoami)\" /bin/ls -l /Users/\"$(whoami)\"/Library/Mobile\\ Documents/com~apple~CloudDocs/Documents/ 2> /dev/null | /usr/bin/grep total)\noutput2=$(/usr/bin/sudo -u \"$(whoami)\" /bin/ls -l /Users/\"$(whoami)\"/Library/Mobile\\ Documents/com~apple~CloudDocs/Desktop/ 2> /dev/null | /usr/bin/grep total)\nfi\n\nif [ -z \"$output1\" ] && [ -z \"$output2\" ]; then\necho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"

    },
    {
      "recommend_id": "2.2.1",
      "title": "Ensure Firewall Is Enabled",
      "command": "/usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS\nfunction run() {\napp = Application.currentApplication()\napp.includeStandardAdditions = true;\n\n let pref1 = app.doShellScript('/usr/bin/defaults read /Library/Preferences/com.apple.alf globalstate')\n let pref2 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.security.firewall')\n .objectForKey('EnableFirewall'))\n\n if ( ( ( pref1 == 1 ) || ( pref1 == 2 ) || ( pref2 == \"true\" ) ) && (pref1 != 0 ) ) {\n return(\"true\")\n } else {\n return(\"false\")\n }\n\n}\nEOS",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.2.2",
      "title": "Ensure Firewall Stealth Mode Is Enabled",
      "command": "/usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS\nfunction run() {\nlet pref1 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.alf')\n .objectForKey('stealthenabled'))\n let pref2 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.security.firewall')\n .objectForKey('EnableStealthMode'))\n if ( ( pref1 == 1 ) || ( pref2 == \"true\" ) ) {\n return(\"true\")\n } else {\n return(\"false\")\n }\n}\nEOS",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.3.1.1",
      "title": "Ensure AirDrop Is Disabled When Not Actively Transferring Files",
      "command": "/usr/bin/sudo /usr/bin/osascript -l JavaScript << 'EOS'\nfunction checkAirDrop() {\nlet userDefaults = $.NSUserDefaults.alloc.initWithSuiteName('com.apple.applicationaccess');\n let allowAirDrop = userDefaults.objectForKey('allowAirDrop');\n if (typeof allowAirDrop === 'undefined' || allowAirDrop === null || allowAirDrop.js !== true) {\nreturn 'false';\n} else {\nreturn 'true';\n}\n}\ncheckAirDrop();\nEOS",
      "expected_output": "false"
    },
    {
      "recommend_id": "2.3.1.2",
      "title": "Ensure AirPlay Receiver Is Disabled",
      "command": "/usr/bin/sudo /usr/bin/osascript -l JavaScript << 'EOS'\nfunction checkAirPlayIncomingRequests() {\nlet userDefaults = $.NSUserDefaults.alloc.initWithSuiteName('com.apple.applicationaccess');\n let allowAirPlayIncomingRequests = userDefaults.objectForKey('allowAirPlayIncomingRequests');\n if (typeof allowAirPlayIncomingRequests === 'undefined' || allowAirPlayIncomingRequests === null || allowAirPlayIncomingRequests.js !== true) {\nreturn 'false';\n} else {\nreturn 'true';\n}\n}\ncheckAirPlayIncomingRequests();\nEOS",
      "expected_output": "false"
    },
    {
      "recommend_id": "2.3.2.1",
      "title": "Ensure Set Time and Date Automatically Is Enabled",
      "command": "/usr/bin/sudo /usr/sbin/systemsetup -getusingnetworktime",
      "expected_output": "Network Time: On"
    },
    {
      "recommend_id": "2.3.2.2",
      "title": "Ensure Time Is Set Within Appropriate Limits",
      "command": "/usr/bin/sudo /usr/sbin/systemsetup -getnetworktimeserver | awk '{print $4}' | xargs -I {} /usr/bin/sudo /usr/bin/sntp {} | awk '{if ($1 >= -270 && $1 <= 270) print \"true\"; else print \"false\"}'",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.3.3.1",
      "title": "Ensure DVD or CD Sharing Is Disabled",
      "command": "/usr/bin/sudo /bin/launchctl list | grep -c com.apple.ODSAgent",
      "expected_output": "0"
    },
    {
      "recommend_id": "2.3.3.2",
      "title": "Ensure Screen Sharing Is Disabled",
      "command": "/usr/bin/sudo /bin/launchctl list | grep -c com.apple.screensharing",
      "expected_output": "0"
    },
    {
      "recommend_id": "2.3.3.3",
      "title": "Ensure File Sharing Is Disabled",
      "command": "/usr/bin/sudo /bin/launchctl list | grep -c \"com.apple.smbd\"",
      "expected_output": "0"
    },
    {
      "recommend_id": "2.3.3.4",
      "title": "Ensure Printer Sharing Is Disabled",
      "command": "/usr/bin/sudo /usr/sbin/cupsctl | grep -c \"_share_printers=0\"",
      "expected_output": "1"
    },
    {
      "recommend_id": "2.3.3.5",
      "title": "Ensure Remote Login Is Disabled",
      "command": " /usr/bin/sudo /usr/sbin/systemsetup -getremotelogin",
      "expected_output": "Remote Login: Off"
    },
    {
      "recommend_id": "2.3.3.6",
      "title": "Ensure Remote Management Is Disabled",
      "command": "if /usr/bin/sudo /bin/ps -ef | /usr/bin/grep -e ARDAgent | grep -v grep > /dev/null; then\necho \"false\"\nelse\necho \"true\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.3.3.7",
      "title": "Ensure Remote Apple Events Is Disabled",
      "command": "/usr/bin/sudo /usr/sbin/systemsetup -getremoteappleevents",
      "expected_output": "Remote Apple Events: Off"
    },
    {
      "recommend_id": "2.3.3.8",
      "title": "Ensure Internet Sharing Is Disabled",
      "command": "output=$(/usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS\n$.NSUserDefaults.alloc.initWithSuiteName('com.apple.MCX')\n.objectForKey('forceInternetSharingOff').js\nEOS\n)\n\nif [ -z \"$output\" ]; then\nenabledOutput=$(/usr/bin/sudo /usr/bin/defaults read /Library/Preferences/SystemConfiguration/com.apple.nat | awk '/Enabled/ {i++; if(i==2) print; }')\n\nif [[ $enabledOutput =~ \"Enabled = 1\" ]]; then\necho \"false\"\nelif [[ $enabledOutput =~ \"Enabled = 0\" ]]; then\necho \"true\"\nfi\nelse\n  echo \"$output\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.3.3.9",
      "title": "Ensure Content Caching Is Disabled",
      "command": "/usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS\nfunction run() {\n let pref1 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.AssetCache')\n .objectForKey('Activated'))\nlet pref2 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.applicationaccess')\n .objectForKey('allowContentCaching'))\nif ( ( pref1 == 0 ) || ( pref2 == 0 ) ) {\n return(\"true\")\n } else {\n return(\"false\")\n }\n}\nEOS",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.3.3.10",
      "title": "Ensure Media Sharing Is Disabled",
      "command": "/usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS\nfunction run() {\n let pref1 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.preferences.sharing.SharingPrefsExtension')\n .objectForKey('homeSharingUIStatus'))\n let pref2 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.preferences.sharing.SharingPrefsExtension')\n .objectForKey('legacySharingUIStatus'))\nlet pref3 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.preferences.sharing.SharingPrefsExtension')\n .objectForKey('mediaSharingUIStatus'))\nif ( pref1 == 0 && pref2 == 0 && pref3 == 0 ) {\n return(\"true\")\n } else {\n return(\"false\")\n }\n}\nEOS",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.3.3.11",
      "title": "Ensure Bluetooth Sharing Is Disabled",
      "command": "output=$(/usr/bin/sudo -u $(whoami) /usr/bin/defaults -currentHost read com.apple.Bluetooth PrefKeyServicesEnabled 2>/dev/null)\n\nif [ -z \"$output\" ]; then\necho \"true\"\nelif [[ \"$output\" == \"0\" ]]; then\necho \"true\"\nelif [[ \"$output\" == \"1\" ]]; then\necho \"false\"\nelse\necho \"true\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.3.4.2",
      "title": "Ensure Time Machine Volumes Are Encrypted If Time Machine Is Enabled",
      "command": "/usr/bin/sudo /usr/bin/defaults read /Library/Preferences/com.apple.TimeMachine.plist | grep -c NotEncrypted",
      "expected_output": "0"
    },
    {
      "recommend_id": "2.4.1",
      "title": "Ensure Show Wi-Fi status in Menu Bar Is Enabled",
      "command": "output=$(/usr/bin/sudo -u $(whoami) /usr/bin/defaults -currentHost read com.apple.controlcenter.plist WiFi 2>/dev/null)\n\nif [ -z \"$output\" ]; then\necho \"true\"\nelif [[ \"$output\" == \"2\" ]]; then\necho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.4.2",
      "title": "Ensure Show Bluetooth Status in Menu Bar Is Enabled",
      "command": "output=$(/usr/bin/sudo -u $(whoami) /usr/bin/defaults -currentHost read com.apple.controlcenter.plist Bluetooth 2>/dev/null)\n\nif [ -z \"$output\" ]; then\necho \"true\"\nelif [[ \"$output\" == \"18\" ]]; then\necho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.6.4",
      "title": "Ensure Limit Ad Tracking Is Enabled",
      "command": "output=$(/usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS\n$.NSUserDefaults.alloc.initWithSuiteName('com.apple.MCX')\n.objectForKey('forceInternetSharingOff').js\nEOS\n)\n\nif [ -z \"$output\" ]; then\nenabledOutput=$(/usr/bin/sudo -u $(whoami) /usr/bin/defaults read /Users/$(whoami)/Library/Preferences/com.apple.AdLib.plist allowApplePersonalizedAdvertising)\n\nif [[ $enabledOutput == \"0\" ]]; then\necho \"false\"\nelse\necho \"true\"\nfi\nelse\necho \"$output\"\nfi",
      "expected_output": "false"
    },
    {
      "recommend_id": "2.6.5",
      "title": "Ensure Gatekeeper Is Enabled",
      "command": "/usr/bin/sudo /usr/sbin/spctl --status",
      "expected_output": "assessments enabled"
    },
    {
      "recommend_id": "2.6.6",
      "title": "Ensure FileVault Is Enabled",
      "command": "/usr/bin/sudo /usr/bin/fdesetup status",
      "expected_output": "FileVault is On."
    },
    {
      "recommend_id": "2.6.8",
      "title": "Ensure an Administrator Password Is Required to Access System-Wide Preferences",
      "command": "authDBs=(\"system.preferences\" \"system.preferences.energysaver\"\n \"system.preferences.network\" \"system.preferences.printing\"\n \"system.preferences.sharing\" \"system.preferences.softwareupdate\"\n \"system.preferences.startupdisk\" \"system.preferences.timemachine\")\nresult=\"1\"\n\nfor section in \"${authDBs[@]}\"; do\nif [[ $(/usr/bin/sudo /usr/bin/security -q authorizationdb read \"$section\" | /usr/bin/xmllint -xpath 'name(//*[contains(text(), \"shared\")]/following-sibling::*[1])' -) != \"false\" ]]; then\nresult=\"0\"\nfi\ndone\n\necho $result\n",
      "expected_output": "1"
    },
    {
      "recommend_id": "2.9.2",
      "title": "Ensure Power Nap Is Disabled for Intel Macs",
      "command": "/usr/bin/sudo /usr/bin/pmset -g custom | /usr/bin/grep -c \"powernap'\\s+'1\"",
      "expected_output": "0"
    },
    {
      "recommend_id": "2.9.3",
      "title": "Ensure Wake for Network Access Is Disabled",
      "command": "output=$(/usr/bin/sudo /usr/bin/pmset -g custom | /usr/bin/grep \"womp\")\n\ntotal_womp_count=0\nwomp_zero_count=0\n\nwhile IFS= read -r line; do\nif [[ \"$line\" =~ womp ]]; then\n((total_womp_count++))\nif [[ \"$line\" =~ womp[[:space:]]+0 ]]; then\n((womp_zero_count++))\nfi\nfi\ndone <<< \"$output\"\n\nif [[ $total_womp_count -eq $womp_zero_count ]]; then\necho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.10.1",
      "title": "Ensure an Inactivity Interval of 20 Minutes Or Less for the Screen Saver Is Enabled",
      "command": "/usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS\nfunction run() {\n let timeout = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.screensaver')\n.objectForKey('idleTime'))\n if ( timeout <= 1200 ) {\n return(\"true\")\n } else {\n return(\"false\")\n }\n}\nEOS",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.10.2",
      "title": "Ensure Require Password After Screen Saver Begins or Display Is Turned Off Is Enabled for 5 Seconds or Immediately",
      "command": "output=$(/usr/bin/sudo /usr/bin/osascript -l JavaScript <<'EOS'\n(function() {\nlet pref1 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.screensaver').objectForKey('askForPassword'));\nlet pref2 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.screensaver').objectForKey('askForPasswordDelay'));\nif (pref1 === 1 && pref2 <= 5) {\nreturn \"true\";\n} else {\nreturn \"check_sysadminctl\";\n  }\n})();\nEOS\n)\n\nif [[ \"$output\" == \"true\" ]]; then\necho \"true\"\nelif [[ \"$output\" == \"check_sysadminctl\" ]]; then\nsysadminctl_output=$(/usr/bin/sudo /usr/sbin/sysadminctl -screenLock status 2>&1)\ndelay=$(echo \"$sysadminctl_output\" | awk -F 'delay is ' '{print $2}' | awk '{print $1}')\nif [[ \"$delay\" == \"immediate\" || \"$delay\" -le 5 ]]; then\necho \"true\"\nelse\necho \"false\"\nfi\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.10.3",
      "title": "Ensure a Custom Message for the Login Screen Is Enabled",
      "command": "output=$(/usr/bin/sudo /usr/bin/osascript -l JavaScript <<'EOS'\n$.NSUserDefaults.alloc.initWithSuiteName('com.apple.loginwindow')\n.objectForKey('LoginwindowText').js\nEOS\n)\n\nif [ -z \"$output\" ]; then\necho \"false\"\nelse\necho \"true\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.10.4",
      "title": "Ensure Login Window Displays as Name and Password Is Enabled",
      "command": "output=$(/usr/bin/sudo /usr/bin/osascript -l JavaScript <<EOS\n$.NSUserDefaults.alloc.initWithSuiteName('com.apple.loginwindow')\n.objectForKey('SHOWFULLNAME').js\nEOS\n)\n\nif [ -z \"$output\" ] || [ \"$output\" = \"false\" ]; then\necho \"false\"\nelse\necho \"true\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.10.5",
      "title": "Ensure Show Password Hints Is Disabled",
      "command": "output=$(/usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS\n$.NSUserDefaults.alloc.initWithSuiteName('com.apple.loginwindow')\n.objectForKey('RetriesUntilHint').js\nEOS\n)\n\nif [ -z \"$output\" ] || [ \"$output\" = \"0\" ]; then\necho \"true\"\nelse\n  echo \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.11.1",
      "title": "Ensure Users' Accounts Do Not Have a Password Hint",
      "command": "output=$(/usr/bin/sudo /usr/bin/dscl . -list /Users hint . -list /Users hint)\nif [ -z \"$output\" ]; then\necho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.12.1",
      "title": "Ensure Guest Account Is Disabled",
      "command": "/usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS\nfunction run() {\nlet pref1 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.MCX')\n.objectForKey('DisableGuestAccount'))\nlet pref2 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.MCX')\n.objectForKey('EnableGuestAccount'))\nlet pref3 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.loginwindow')\n.objectForKey('GuestEnabled'))\nif (( pref1 == 1 && pref2 == 0 ) || ( pref3 == 0 )) {\n return(\"true\")\n } else {\n return(\"false\")\n }\n}\nEOS",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.12.2",
      "title": "Ensure Guest Access to Shared Folders Is Disabled",
      "command": "output=$(/usr/bin/sudo /usr/sbin/sysadminctl -smbGuestAccess status 2>&1)\nif echo \"$output\" | grep -q \"SMB guest access disabled\"; then\necho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.12.3",
      "title": "Ensure Automatic Login Is Disabled",
      "command": "/usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS\nfunction run() {\n let pref1 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.loginwindow')\n.objectForKey('com.apple.login.mcx.DisableAutoLoginClient'))\nlet pref2 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.loginwindow')\n.objectForKey('autoLoginUser'))\nif ( pref1 == 1 || pref2 == null ) {\n return(\"true\")\n } else {\n return(\"false\")\n }\n}\nEOS",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.3.4.1",
      "title": "Ensure Backup Automatically is Enabled If Time Machine Is Enabled",
      "command": "output=$(/usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS\nfunction run() {\n let pref1 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.TimeMachine')\n .objectForKey('AutoBackup'))\nif ( pref1 == null ) {\n return(\"Preference Not Set\")\n } else if ( pref1 == 1 ) {\n return(\"true\")\n } else {\n return(\"false\")\n }\n}\nEOS\n)\n\nif [[ \"$output\" == \"Preference Not Set\" ]] || [[ \"$output\" == \"true\" ]]; then\necho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.6.1.1",
      "title": "Ensure Location Services Is Enabled",
      "command": "/usr/bin/sudo -u _locationd /usr/bin/osascript -l JavaScript << EOS\n$.NSUserDefaults.alloc.initWithSuiteName('com.apple.locationd').objectForKey('LocationServicesEnabled').js\nEOS",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.6.1.2",
      "title": "Ensure Location Services Is in the Menu Bar",
      "command": "output=$(/usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS\n$.NSUserDefaults.alloc.initWithSuiteName('com.apple.locationmenu')\n.objectForKey('ShowSystemServices').js\nEOS\n)\n\nif [ \"$output\" = \"true\" ]; then\ncho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.6.3",
      "title": "Ensure Sending Diagnostic and Usage Data to Apple Is Disabled",
      "command": "/usr/bin/osascript -l JavaScript << EOS\nfunction run() {\nlet pref1 = $.NSUserDefaults.alloc.initWithSuiteName('com.apple.SubmitDiagInfo')\n.objectForKey('AutoSubmit').js\nlet pref2 = $.NSUserDefaults.alloc.initWithSuiteName('com.apple.applicationaccess')\n.objectForKey('allowDiagnosticSubmission').js\nlet pref3 = $.NSUserDefaults.alloc.initWithSuiteName('com.apple.applicationaccess')\n.objectForKey('Siri Data Sharing Opt-In Status').js\n\nif ( pref1 == false && pref2 == false && pref3 == 2){\n return(\"true\")\n} else {\n return(\"false\")\n}\n}\nEOS",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.7.1",
      "title": "Ensure Screen Saver Corners Are Secure",
      "command": "result=true\n\noutput_tl=$(/usr/bin/sudo -u \"$(whoami)\" /usr/bin/defaults read com.apple.dock wvous-tl-corner)\nif [ \"$output_tl\" = \"6\" ]; then\nresult=false\nfi\n\noutput_bl=$(/usr/bin/sudo -u \"$(whoami)\" /usr/bin/defaults read com.apple.dock wvous-bl-corner)\nif [ \"$output_bl\" = \"6\" ]; then\nresult=false\nfi\n\noutput_tr=$(/usr/bin/sudo -u \"$(whoami)\" /usr/bin/defaults read com.apple.dock wvous-tr-corner)\nif [ \"$output_tr\" = \"6\" ]; then\nresult=false\nfi\n\noutput_br=$(/usr/bin/sudo -u \"$(whoami)\" /usr/bin/defaults read com.apple.dock wvous-br-corner)\nif [ \"$output_br\" = \"6\" ]; then\nresult=false\nfi\n\necho \"$result\"",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.9.1.1",
      "title": "Ensure the OS Is Not Active When Resuming from Standby (Intel)",
      "command": "result=true\n\nif /usr/sbin/sysctl -n machdep.cpu.brand_string | /usr/bin/grep -q \"Intel\"; then\n\nif /usr/bin/sudo /usr/sbin/system_profiler SPHardwareDataType | /usr/bin/grep -q \"MacBook\"; then\nstandby_info=$(/usr/bin/sudo /usr/bin/pmset -b -g | /usr/bin/grep -e standby)\n\nstandbydelaylow=$(echo \"$standby_info\" | /usr/bin/grep -o 'standbydelaylow [0-9]*' | cut -d ' ' -f 2)\nstandbydelayhigh=$(echo \"$standby_info\" | /usr/bin/grep -o 'standbydelayhigh [0-9]*' | cut -d ' ' -f 2)\nhighstandbythreshold=$(echo \"$standby_info\" | /usr/bin/grep -o 'highstandbythreshold [0-9]*' | cut -d ' ' -f 2)\n\nif [ -z \"$standbydelaylow\" ] || [ \"$standbydelaylow\" -gt 900 ] || [ -z \"$standbydelayhigh\" ] || [ \"$standbydelayhigh\" -gt 900 ] || [ -z \"$highstandbythreshold\" ] || [ \"$highstandbythreshold\" -lt 90 ]; then\nresult=false\nfi\n\nhibernatemode=$(/usr/bin/sudo /usr/bin/pmset -b -g | /usr/bin/grep -o 'hibernatemode [0-9]*' | cut -d ' ' -f 2)\nif [ -z \"$hibernatemode\" ] || [ \"$hibernatemode\" != \"25\" ]; then\nresult=false\nfi\nelse\nresult=false\nfi\nfi\n\necho \"$result\"",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.9.1.2",
      "title": "Ensure the OS Is Not Active When Resuming from Sleep and Display Sleep (Apple Silicon)",
      "command": "result=true\n\nif /usr/bin/sudo /usr/sbin/system_profiler SPHardwareDataType | /usr/bin/grep -q -e MacBook; then\n\nresult=true\n\npm_settings=$(/usr/bin/sudo /usr/bin/pmset -g)\n\nsleep_value=$(echo \"$pm_settings\" | /usr/bin/grep -E \"sleep\\s+[0-9]+\" | awk '{for(i=1;i<=NF;i++){if($i==\"sleep\"){print $(i+1)}}}')\nif [ -z \"$sleep_value\" ] || [ \"$sleep_value\" -gt 15 ]; then\nresult=false\nfi\n\ndisplaysleep_value=$(echo \"$pm_settings\" | /usr/bin/grep \"displaysleep\" | awk '{print $2}')\nif [ -z \"$displaysleep_value\" ] || [ \"$displaysleep_value\" -gt 10 ] || [ \"$displaysleep_value\" -gt \"$sleep_value\" ]; then\nresult=false\nfi\n\nhibernatemode_value=$(echo \"$pm_settings\" | /usr/bin/grep \"hibernatemode\" | awk '{print $2}')\nif [ -z \"$hibernatemode_value\" ] || [ \"$hibernatemode_value\" != \"25\" ]; then\nresult=false\nfi\n\necho \"$result\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.9.1.3",
      "title": "Ensure FileVault is Locked on Sleep",
      "command": "if /usr/bin/sudo /usr/sbin/system_profiler SPHardwareDataType | /usr/bin/grep -q -e MacBook; then\n\nresult=$(/usr/bin/sudo /usr/bin/pmset -b -g | /usr/bin/grep DestroyFVKeyOnStandby)\nif [ \"$result\" = \"DestroyFVKeyOnStandby 1\" ]; then\necho \"true\"\nelse\necho \"false\"\nfi\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "3.1",
      "title": "Ensure Security Auditing Is Enabled",
      "command": "output=$(/usr/bin/sudo /bin/launchctl list | /usr/bin/awk '$2 == 0 && $3 == \"com.apple.auditd\"')\nif [[ -n \"$output\" ]]; then\necho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "3.2",
      "title": "Ensure Security Auditing Flags For User-Attributable Events Are Configured Per Local Organizational Requirements",
      "command": "compliant=\"true\"\nrequired_flags=(\"ad\" \"aa\" \"lo\")\nfailed_event_flags=(\"-fm\" \"-ex\" \"-fr\" \"-fw\")\n\ncurrent_flags=$(/usr/bin/sudo /usr/bin/grep -e \"^flags:\" /etc/security/audit_control)\n\ncontains_flag() {\n[[ $current_flags =~ $1 ]] && return 0 || return 1\n}\n\nif contains_flag \"-all\"; then\nfor flag in \"${required_flags[@]}\"; do\nif ! contains_flag \"$flag\"; then\ncompliant=\"false\"\nfi\ndone\nelse\nfor flag in \"${required_flags[@]}\" \"${failed_event_flags[@]}\"; do\nif ! contains_flag \"$flag\"; then\ncompliant=\"false\"\nfi\ndone\nfi\n\necho \"$compliant\"",
      "expected_output": "true"
    },
    {
      "recommend_id": "3.3",
      "title": "Ensure install.log Is Retained for 365 or More Days and No Maximum Size",
      "command": "ttl_output=$(/usr/bin/sudo /usr/bin/grep -i ttl /etc/asl/com.apple.install)\nall_max_output=$(/usr/bin/sudo /usr/bin/grep -i all_max= /etc/asl/com.apple.install)\nif echo \"$ttl_output\" | grep -q \"ttl≥365\" && [[ -z \"$all_max_output\" ]]; then\necho \"true\"\nelse\necho \"false\"\nfi\n",
      "expected_output": "true"
    },
    {
      "recommend_id": "3.4",
      "title": "Ensure Security Auditing Retention Is Enabled",
      "command": "output=$(/usr/bin/sudo /usr/bin/grep -e \"^expire-after\" /etc/security/audit_control)\nvalue=$(echo \"$output\" | cut -d ':' -f2 | xargs)\nnumber=$(echo \"$value\" | grep -o -E '[0-9]+')\nunit=$(echo \"$value\" | grep -o -E '[a-zA-Z]+')\nmeets_criteria=false\nif [[ $unit == \"G\" && $number -ge 5 ]]; then\necho \"true\"\nelif [[ $unit == \"d\" && $number -ge 60 ]]; then\necho \"true\"\nelif [[ $unit == \"M\" && $number -ge 5120 ]]; then\necho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "3.6",
      "title": "Ensure Firewall Logging Is Enabled and Configured",
      "command": "/usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS\nfunction run() {\nlet pref1 = $.NSUserDefaults.alloc.initWithSuiteName('com.apple.security.firewall')\n.objectForKey('EnableLogging').js\nlet pref2 = $.NSUserDefaults.alloc.initWithSuiteName('com.apple.security.firewall')\n.objectForKey('LoggingOption').js\nlet pref3 = $.NSUserDefaults.alloc.initWithSuiteName('com.apple.alf')\n.objectForKey('loggingenabled').js\nlet pref4 = $.NSUserDefaults.alloc.initWithSuiteName('com.apple.alf')\n.objectForKey('loggingoption').js\n if ( ( pref1 == true && pref2 == \"detail\" ) || ( pref3 == 1 && pref4 == 2 ) ) {\n return(\"true\")\n} else {\n return(\"false\")\n}\n}\nEOS",
      "expected_output": "true"
    },
    {
      "recommend_id": "4.1",
      "title": "Ensure Bonjour Advertising Services Is Disabled",
      "command": "/usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS\n$.NSUserDefaults.alloc.initWithSuiteName('com.apple.mDNSResponder')\n.objectForKey('NoMulticastAdvertisements').js\nEOS",
      "expected_output": "true"
    },
    {
      "recommend_id": "4.2",
      "title": "Ensure HTTP Server Is Disabled",
      "command": "/usr/bin/sudo /bin/launchctl list | /usr/bin/grep -c \"org.apache.httpd\"",
      "expected_output": "0"
    },
    {
      "recommend_id": "4.3",
      "title": "Ensure NFS Server Is Disabled",
      "command": "nfsd_count=$(/usr/bin/sudo /bin/launchctl list | /usr/bin/grep -c com.apple.nfsd)\nexports_exists=$(/usr/bin/sudo /bin/cat /etc/exports 2>&1)\nif [[ \"$nfsd_count\" -eq 0 && \"$exports_exists\" == \"cat: /etc/exports: No such file or directory\" ]]; then\necho \"true\"\nelse\necho \"false\"\nfi\n",
      "expected_output": "true"
    },
    {
      "recommend_id": "5.1.1",
      "title": "Ensure Home Folders Are Secure",
      "command": "output=$(/usr/bin/sudo /usr/bin/find /System/Volumes/Data/Users -mindepth 1 -maxdepth 1 -type d -not -perm 700 | /usr/bin/grep -v \"Shared\" | /usr/bin/grep -v \"Guest\")\nif [[ -z \"$output\" ]]; then\necho \"true\"\nelse\necho \"false\"\nfi\n",
      "expected_output": "true"
    },
    {
      "recommend_id": "5.1.2",
      "title": "Ensure System Integrity Protection Status (SIP) Is Enabled",
      "command": "output=$(/usr/bin/sudo /usr/bin/csrutil status)\nif [[ \"$output\" == \"System Integrity Protection status: enabled.\" ]]; then\necho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "5.1.3",
      "title": "Ensure Apple Mobile File Integrity (AMFI) Is Enabled",
      "command": "/usr/bin/sudo /usr/sbin/nvram -p | /usr/bin/grep -c \"amfi_get_out_of_my_way=1\"",
      "expected_output": "0"
    },
    {
      "recommend_id": "5.1.4",
      "title": "Ensure Sealed System Volume (SSV) Is Enabled",
      "command": "output=$(/usr/bin/sudo /usr/bin/csrutil authenticated-root status)\nif [[ \"$output\" == \"Authenticated Root status: enabled\" ]]; then\necho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "5.1.5",
      "title": "Ensure Appropriate Permissions Are Enabled for System Wide Applications",
      "command": "/usr/bin/sudo /usr/bin/find /System/Volumes/Data/Applications -iname \"*\\.app\" -type d -perm -2 -ls | grep -v Xcode.app | /usr/bin/wc -l | /usr/bin/xargs",
      "expected_output": "0"
    },
    {
      "recommend_id": "5.1.6",
      "title": "Ensure No World Writable Folders Exist in the System Folder",
      "command": "/usr/bin/sudo /usr/bin/find /System/Volumes/Data/System -type d -perm -2 -ls | /usr/bin/grep -v \"downloadDir\" | /usr/bin/wc -l | /usr/bin/xargs",
      "expected_output": "0"
    },
    {
      "recommend_id": "5.1.7",
      "title": "Ensure No World Writable Folders Exist in the Library Folder",
      "command": "output=$(/usr/bin/sudo /usr/bin/find /System/Volumes/Data/Library -type d -perm -2 -ls 2> /dev/null | /usr/bin/grep -v Caches | /usr/bin/grep -v /Preferences/Audio/Data | /usr/bin/wc -l | /usr/bin/xargs)\n\nif [ \"$output\" = 0 ]; then\necho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "5.2.1",
      "title": "Ensure Password Account Lockout Threshold Is Configured",
      "command": "max_attempts_output=$(/usr/bin/sudo /usr/bin/pwpolicy -getaccountpolicies 2> /dev/null | /usr/bin/grep \"policyAttributeMaximumFailedAuthentications\")\nmax_attempts=$(echo $max_attempts_output | /usr/bin/cut -d'>' -f2 | /usr/bin/cut -d '<' -f1)\nmax_attempts_result=false\nif [[ \"$max_attempts\" != \"\" && \"$max_attempts\" -le 5 ]]; then\nmax_attempts_result=true\nfi\nlockout_minutes_output=$(/usr/bin/sudo /usr/bin/pwpolicy -getaccountpolicies 2> /dev/null | /usr/bin/grep \"policyAttributeMinutesUntilFailedAuthenticationReset\")\nlockout_minutes=$(echo $lockout_minutes_output | /usr/bin/cut -d'>' -f2 | /usr/bin/cut -d '<' -f1)\nlockout_time_result=false\nif [[ \"$lockout_minutes\" != \"\" && \"$lockout_minutes\" -ge 15 ]]; then\nlockout_time_result=true\nfi\nif [[ \"$max_attempts_result\" == true && \"$lockout_time_result\" == true ]]; then\necho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "5.2.2",
      "title": "Ensure Password Minimum Length Is Configured",
      "command": "output=$(/usr/bin/sudo /usr/bin/pwpolicy -getaccountpolicies | /usr/bin/grep -e \"policyAttributePassword matches\" | /usr/bin/cut -b 46-53 | /usr/bin/cut -d',' -f1 | /usr/bin/cut -d'{' -f2)\nif [ \"$output\" -ge 15 ]; then\necho \"true\"\nelse\n  echo \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "5.2.3",
      "title": "Ensure Complex Password Must Contain Alphabetic Characters Is Configured",
      "command": "pref1=$(/usr/bin/pwpolicy -getaccountpolicies | /usr/bin/grep -e \"Contain at least one number and one alphabetic character.\" | cut -b 13-68)\npref2=$(/usr/bin/pwpolicy -getaccountpolicies | /usr/bin/grep -A1 minimumLetters | /usr/bin/tail -1 | /usr/bin/cut -d'>' -f2 | /usr/bin/cut -d '<' -f1)\n\nif [ \"$pref1\" = \"Contain at least one number and one alphabetic character\" ]; then\necho \"true\"\nelif [[ \"$pref2\" != \"\" && $pref2 -ge 1 ]]; then\necho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "5.2.4",
      "title": "Ensure Complex Password Must Contain Numeric Character Is Configured",
      "command": "pref1=$(/usr/bin/pwpolicy -getaccountpolicies | /usr/bin/grep -e \"Contain at least one number and one alphabetic character.\" | cut -b 13-68)\npref2=$(/usr/bin/pwpolicy -getaccountpolicies | /usr/bin/grep -A1 minimumNumericCharacters | /usr/bin/tail -1 | /usr/bin/cut -d'>' -f2 | /usr/bin/cut -d '<' -f1)\n\nif [ \"$pref1\" = \"Contain at least one number and one alphabetic character\" ]; then\necho \"true\"\nelif [[ \"$pref2\" != \"\" && $pref2 -ge 1 ]]; then\necho \"true\"\nelse\necho \"false\"\nfi\n",
      "expected_output": "true"
    },
    {
      "recommend_id": "5.2.5",
      "title": "Ensure Complex Password Must Contain Special Character Is Configured",
      "command": "pref1=$(/usr/bin/pwpolicy -getaccountpolicies | /usr/bin/grep -e \"policyAttributePassword matches '(.*[^a-zA-Z0-9].*){1,}'\" | cut -b 12-67)\npref2=$(/usr/bin/pwpolicy -getaccountpolicies | /usr/bin/grep -A1 minimumSymbols | /usr/bin/tail -1 | /usr/bin/cut -d'>' -f2 | /usr/bin/cut -d '<' -f1)\n\nif [ \"$pref1\" = \"policyAttributePassword matches '(.*[^a-zA-Z0-9].*){1,}'\" ]; then\necho \"true\"\nelif [[ \"$pref2\" != \"\" && $pref2 -ge 1 ]]; then\necho \"true\"\nelse \necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "5.2.6",
      "title": "Ensure Complex Password Must Contain Uppercase and Lowercase Characters Is Configured",
      "command": "pref=$(/usr/bin/pwpolicy -getaccountpolicies | /usr/bin/grep -A1 minimumMixedCaseCharacters | /usr/bin/tail -1 | /usr/bin/cut -d'>' -f2 | /usr/bin/cut -d '<' -f1)\n\nif [[ \"$pref\" != \"\" && $pref -ge 1 ]]; then\necho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "5.2.7",
      "title": "Ensure Password Age Is Configured",
      "command": "pref1=$(/usr/bin/sudo /usr/bin/pwpolicy -getaccountpolicies | /usr/bin/grep -A1 policyAttributeExpiresEveryNDays | /usr/bin/tail -1 | /usr/bin/cut -d'>' -f2 | /usr/bin/cut -d '<' -f1) &&\npref2=$(/usr/bin/sudo /usr/bin/pwpolicy -getaccountpolicies | /usr/bin/grep -A1 policyAttributeDaysUntilExpiration | /usr/bin/tail -1 | /usr/bin/cut -d'>' -f2 | /usr/bin/cut -d '<' -f1) && \n[[ (\"$pref1\" != \"\" && \"$pref1\" -le 365) || (\"$pref2\" != \"\" && \"$pref2\" -le 365) ]] && echo \"true\" || echo \"false\"",
      "expected_output": "true"
    },
    {
      "recommend_id": "5.2.8",
      "title": "Ensure Password History Is Configured",
      "command": "pref=$(/usr/bin/sudo /usr/bin/pwpolicy -getaccountpolicies | /usr/bin/grep -A1 policyAttributePasswordHistoryDepth | /usr/bin/tail -1 | /usr/bin/cut -d'>' -f2 | /usr/bin/cut -d '<' -f1)\nif [[ \"$pref\" != \"\" && \"$pref\" -ge 1 ]]; then\necho \"true\"\nelse\necho \"false\"\nfi\n",
      "expected_output": "true"
    },
    {
      "recommend_id": "5.3.1",
      "title": "Ensure all user storage APFS volumes are encrypted",
      "command": "output=$(/usr/bin/sudo /usr/sbin/diskutil apfs list)\nall_encrypted=true\nwhile IFS= read -r line; do\nif [[ \"$line\" == *\"FileVault:\"* ]]; then\nfv_status=$(echo \"$line\" | awk -F \"FileVault: \" '{print $2}' | awk '{print $1}')\nif [[ \"$fv_status\" == \"No\" ]]; then\nall_encrypted=false\nbreak\nfi\nfi\ndone <<< \"$output\"\nif $all_encrypted; then\necho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "5.3.2",
      "title": "Ensure all user storage CoreStorage volumes are encrypted",
      "command": "output=$(/usr/bin/sudo /usr/sbin/diskutil cs list)\nencrypted=true\nif [[ \"$output\" != \"No CoreStorage logical volume groups found\" ]]; then\necho \"$output\" | while read -r line; do\nif [[ \"$line\" == *\"Encryption Status:\"* && \"$line\" != *\"Unlocked\"* ]]; then\nencrypted=false\nbreak\nfi\ndone\nfi\nif $encrypted; then\necho \"true\"\nelse\necho \"false\"\nfi\n",
      "expected_output": "true"
    },
    {
      "recommend_id": "5.4",
      "title": "Ensure the Sudo Timeout Period Is Set to Zero",
      "command": "timeout_check=$(/usr/bin/sudo /usr/bin/sudo -V | /usr/bin/grep -c \"Authentication timestamp timeout: 0.0 minutes\")\nownership_check=$(/usr/bin/stat /etc/sudoers.d | awk '{print $5, $6}')\nif [[ \"$timeout_check\" -eq 1 && \"$ownership_check\" == \"root wheel\" ]]; then\necho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "5.5",
      "title": "Ensure a Separate Timestamp Is Enabled for Each User/tty Combo",
      "command": "/usr/bin/sudo /usr/bin/sudo -V | /usr/bin/grep -c \"Type of authentication timestamp record: tty\"",
      "expected_output": "1"
    },
    {
      "recommend_id": "5.6",
      "title": "Ensure the root Account Is Disabled",
      "command": "output=$(/usr/bin/sudo /usr/bin/dscl . -read /Users/root AuthenticationAuthority 2>&1)\nif [[ \"$output\" == \"No such key: AuthenticationAuthority\" ]]; then\necho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "5.7",
      "title": "Ensure an Administrator Account Cannot Login to Another User's Active and Locked Session",
      "command": "/usr/bin/sudo /usr/bin/security authorizationdb read system.login.screensaver 2>&1 | /usr/bin/grep -c 'use-login-window-ui'",
      "expected_output": "1"
    },
    {
      "recommend_id": "5.8",
      "title": "Ensure a Login Window Banner Exists",
      "command": "compliant=\"false\"\n\npolicy_banner_files=$(sudo find /Library/Security -name \"PolicyBanner.*\" 2> /dev/null)\n\nif [[ -n $policy_banner_files ]]; then\nall_files_compliant=\"true\"\n\nfor file in $policy_banner_files; do\npermissions=$(sudo /usr/bin/stat -f %A \"$file\")\nthird_digit=${permissions:2:1}\nif [[ $third_digit != \"4\" ]]; then\nall_files_compliant=\"false\"\nbreak\nfi\ndone\n\nif [[ $all_files_compliant == \"true\" ]]; then\ncompliant=\"true\"\nfi\nfi\n\necho \"$compliant\"\n",
      "expected_output": "true"
    },
    {
      "recommend_id": "5.9",
      "title": "Ensure Legacy EFI Is Valid and Updating",
      "command": "processor_brand=$(/usr/bin/sudo /usr/sbin/sysctl -n machdep.cpu.brand_string)\nif [[ \"$processor_brand\" == *\"Apple\"* ]]; then\necho \"true\"\nelse\nt2_check=$(/usr/bin/sudo /usr/sbin/system_profiler SPiBridgeDataType | grep \"T2\")\nefi_check_output=$(/usr/bin/sudo /usr/libexec/firmwarecheckers/eficheck/eficheck --integrity-check)\neficheck_daemon_check=$(/usr/bin/sudo /bin/launchctl list | /usr/bin/grep com.apple.driver.eficheck)\nif [[ \"$t2_check\" == *\"Model Name: Apple T2 Security Chip\"* && \"$efi_check_output\" == *\"Primary allowlist version match found. No changes detected in primary hashes.\" && \"$eficheck_daemon_check\" == \"- 0 com.apple.driver.eficheck\" ]]; then\necho \"true\"\nelse\necho \"false\"\nfi\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "5.10",
      "title": "Ensure the Guest Home Folder Does Not Exist",
      "command": "output=$(/usr/bin/sudo /bin/ls /Users/ | /usr/bin/grep Guest)\nif [[ -z \"$output\" ]]; then\necho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "5.11",
      "title": "Ensure XProtect Is Running and Updated",
      "command": "sudo /bin/launchctl list | /usr/bin/grep -cE \"(com.apple.XprotectFramework.PluginService$|com.apple.XProtect.daemon.scan$)\"",
      "expected_output": "2"
    },
    {
      "recommend_id": "6.1.1",
      "title": "Ensure Show All Filename Extensions Setting is Enabled",
      "command": "output=$(/usr/bin/sudo -u \"$(whoami)\" /usr/bin/defaults read /Users/\"$(whoami)\"/Library/Preferences/.GlobalPreferences.plist AppleShowAllExtensions 2> /dev/null)\nif [[ \"$output\" = \"1\" ]]; then\necho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "6.3.1",
      "title": "Ensure Automatic Opening of Safe Files in Safari Is Disabled",
      "command": "output=$(/usr/bin/sudo /usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep AutoOpenSafeDownloads | /usr/bin/tr -d ' ' 2> /dev/null)\nif [[ -n \"$output\" ]]; then\nif [[ \"$output\" = \"AutoOpenSafeDownloads = 0;\" ]]; then\necho \"true\"\nelse\necho \"false\"\nfi\nelse\noutput2=$(/usr/bin/sudo -u \"$(whoami)\" /usr/bin/defaults read /Users/\"$(whoami)\"/Library/Containers/com.apple.Safari/Data/Library/Preferences/com.apple.Safari AutoOpenSafeDownloads 2> /dev/null)\nif [[ \"$output2\" = \"0\" ]]; then\necho \"true\"\nelse\necho \"false\"\nfi\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "6.3.3",
      "title": "Ensure Warn When Visiting A Fraudulent Website in Safari Is Enabled",
      "command": "output=$(/usr/bin/sudo /usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep WarnAboutFraudulentWebsites | /usr/bin/tr -d ' ' 2> /dev/null)\nif [[ -n \"$output\" ]]; then\nif [[ \"$output\" = \"WarnAboutFraudulentWebsites = 1;\" ]]; then\necho \"true\"\nelse\necho \"false\"\nfi\nelse\noutput2=$(/usr/bin/sudo -u \"$(whoami)\" /usr/bin/defaults read /Users/\"$(whoami)\"/Library/Containers/com.apple.Safari/Data/Library/Preferences/com.apple.Safari WarnAboutFraudulentWebsites 2> /dev/null)\nif [[ \"$output2\" = \"0\" ]]; then\necho \"true\"\nelse\necho \"false\"\nfi\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "6.3.4",
      "title": "Ensure Prevent Cross-site Tracking in Safari Is Enabled",
      "command": "policy1=$(/usr/bin/sudo /usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep BlockStoragePolicy | /usr/bin/tr -d ' ' 2> /dev/null)\npolicy2=$(/usr/bin/sudo /usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep WebKitPreferences.storageBlockingPolicy | /usr/bin/tr -d ' ' 2> /dev/null)\npolicy3=$(/usr/bin/sudo /usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep WebKitStorageBlockingPolicy | /usr/bin/tr -d ' ' 2> /dev/null)\nif [[ -n \"$policy1\" ]] && [[ -n \"$policy2\" ]] && [[ -n \"$policy3\" ]]; then\nif [[ \"$policy1\" == \"BlockStoragePolicy=2;\" ]] && [[ \"$policy2\" == \"WebKitPreferences.storageBlockingPolicy=1;\" ]] && [[ \"$policy3\" == \"WebKitStorageBlockingPolicy=1;\" ]]; then\necho \"true\"\nelse\necho \"false\"\nfi\nelse\npolicy1=$(/usr/bin/sudo -u \"$(whoami)\" /usr/bin/defaults read /Users/\"$(whoami)\"/Library/Containers/com.apple.Safari/Data/Library/Preferences/com.apple.Safari BlockStoragePolicy 2> /dev/null)\npolicy2=$(/usr/bin/sudo -u \"$(whoami)\" /usr/bin/defaults read /Users/\"$(whoami)\"/Library/Containers/com.apple.Safari/Data/Library/Preferences/com.apple.Safari WebKitPreferences.storageBlockingPolicy 2> /dev/null)\npolicy3=$(/usr/bin/sudo -u \"$(whoami)\" /usr/bin/defaults read /Users/\"$(whoami)\"/Library/Containers/com.apple.Safari/Data/Library/Preferences/com.apple.Safari WebKitStorageBlockingPolicy 2> /dev/null)\nif [[ \"$policy1\" == \"2\" ]] && [[ \"$policy2\" == \"1\" ]] && [[ \"$policy3\" == \"1\" ]]; then\necho \"true\"\nelse\necho \"false\"\nfi\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "6.3.5",
      "title": "Audit Hide IP Address in Safari Setting",
      "command": "username=\"$(whoami)\"\n\noutput=$(sudo -u \"$username\" defaults read /Users/\"$username\"/Library/Containers/com.apple.Safari/Data/Library/Preferences/com.apple.Safari WBSPrivacyProxyAvailabilityTraffic 2> /dev/null)\n\nif [[ $output == 33422564 || $output == 33422572 ]]; then\necho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "6.3.6",
      "title": "Ensure Advertising Privacy Protection in Safari Is Enabled",
      "command": "output=$(/usr/bin/sudo /usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep \"WebKitPreferences.privateClickMeasurementEnabled\" | /usr/bin/tr -d ' ' 2> /dev/null)\nif [[ -n \"$output\" ]] && [[ \"$output\" == \"\\\"WebKitPreferences.privateClickMeasurementEnabled\\\" = 1;\" ]]; then\necho \"true\"\nelse\noutput=$(/usr/bin/sudo -u \"$(whoami)\" /usr/bin/defaults read /Users/\"$(whoami)\"/Library/Containers/com.apple.Safari/Data/Library/Preferences/com.apple.Safari WebKitPreferences.privateClickMeasurementEnabled 2> /dev/null)\nif [[ \"$output\" == \"1\" ]]; then\necho \"true\"\nelse\necho \"false\"\nfi\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "6.3.7",
      "title": "Ensure Show Full Website Address in Safari Is Enabled",
      "command": "output=$(/usr/bin/sudo /usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep ShowFullURLInSmartSearchField | /usr/bin/tr -d ' ' 2> /dev/null)\nif [[ -n \"$output\" ]] && [[ \"$output\" == \"ShowFullURLInSmartSearchField=1;\" ]]; then\necho \"true\"\nelse\noutput=$(/usr/bin/sudo -u \"$(whoami)\" /usr/bin/defaults read /Users/\"$(whoami)\"/Library/Containers/com.apple.Safari/Data/Library/Preferences/com.apple.Safari ShowFullURLInSmartSearchField 2> /dev/null)\nif [[ \"$output\" == \"1\" ]]; then\necho \"true\"\nelse\necho \"false\"\nfi\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "6.3.9",
      "title": "Ensure Pop-up Windows Are Blocked",
      "command": "output=$(/usr/bin/sudo /usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep safariAllowPopups | /usr/bin/tr -d ' ')\nif [[ -n \"$output\" ]] && [[ \"$output\" == \"safariAllowPopups=0;\" ]]; then\necho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "6.3.10",
      "title": "Ensure Javascript Is Enabled",
      "command": "output=$(/usr/bin/sudo /usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep WebKitPreferences.javaScriptEnabled | /usr/bin/tr -d ' ')\nif [[ -n \"$output\" ]] && [[ \"$output\" == \"WebKitPreferences.javaScriptEnabled = 1;\" ]]; then\necho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "6.3.11",
      "title": "Ensure Show Status Bar Is Enabled",
      "command": "output=$(/usr/bin/sudo /usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep ShowOverlayStatusBar | /usr/bin/tr -d ' ')\nif [[ -n \"$output\" ]] && [[ \"$output\" == \"ShowOverlayStatusBar = 1;\" ]]; then\n  echo \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "6.4.1",
      "title": "Ensure Secure Keyboard Entry Terminal.app Is Enabled",
      "command": "output=$(/usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS\n$.NSUserDefaults.alloc.initWithSuiteName('com.apple.Terminal')\n.objectForKey('SecureKeyboardEntry').js\nEOS\n)\nif [[ -n \"$output\" ]] && [[ \"$output\" == \"true\" ]]; then\necho \"true\"\nelse\noutput=$(/usr/bin/sudo -u \"$(whoami)\" /usr/bin/defaults read -app Terminal SecureKeyboardEntry)\nif [[ \"$output\" == \"1\" ]]; then\necho \"true\"\nelse\necho \"false\"\nfi\nfi",
      "expected_output": "true"
    }
  ],
  "MacOS Sonoma": [
  ]
}

