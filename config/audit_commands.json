{
  "MacOS Ventura": [
    {
      "recommend_id": "1.1",
      "description": "Ensure All Apple-provided Software Is Current",
      "command": "/usr/bin/sudo /usr/sbin/softwareupdate -l",
      "expected_output": "No new software available."
    },
    {
      "recommend_id": "1.2",
      "description": "Ensure Auto Update Is Enabled",
      "command": "/usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS\n$.NSUserDefaults.alloc.initWithSuiteName('com.apple.SoftwareUpdate')\n.objectForKey('AutomaticCheckEnabled').js\nEOS",
      "expected_output": "true"
    },
    {
      "recommend_id": "1.3",
      "description": "Ensure Download New Updates When Available Is Enabled",
      "command": " /usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS\n$.NSUserDefaults.alloc.initWithSuiteName('com.apple.SoftwareUpdate')\n.objectForKey('AutomaticDownload').js\nEOS",
      "expected_output": "true"
    },
    {
      "recommend_id": "1.4",
      "description": "Ensure install of MacOS Updates is Enabled",
      "command": "/usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS\n$.NSUserDefaults.alloc.initWithSuiteName('com.apple.SoftwareUpdate')\n.objectForKey('AutomaticallyInstallMacOSUpdates').js\nEOS",
      "expected_output": "true"
    },
    {
      "recommend_id": "1.5",
      "description": "Ensure Install Application Updates from the App Store Is Enabled",
      "command": "/usr/bin/sudo /usr/bin/osascript -l JavaScript << 'EOS'\nfunction run() {\n let pref1 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.commerce')\n .objectForKey('AutoUpdate'));\n let pref2 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.SoftwareUpdate')\n .objectForKey('AutomaticallyInstallAppUpdates'));\n if ( pref1 == 1 || pref2 == 1 ) {\nreturn('true');\n} else {\nreturn('false');\n}\n}\nEOS",
      "expected_output": "true"
    },
    {
      "recommend_id": "1.6",
      "description": "Ensure Install Security Responses and System Files Is Enabled",
      "command": "/usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS\nfunction run() {\n let pref1 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.SoftwareUpdate')\\\n .objectForKey('ConfigDataInstall'))\n let pref2 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.SoftwareUpdate')\n .objectForKey('CriticalUpdateInstall'))\n if ( pref1 == 1 && pref2 == 1 ) {\nreturn(\"true\")\n} else {\n return(\"false\")\n }\n}\nEOS",
      "expected_output": "true"
    },
    {
      "recommend_id": "1.7",
      "description": "Ensure Software Update Deferment Is Less Than or Equal to 30 Days",
      "command": "result=$(/usr/bin/sudo /usr/bin/osascript -l JavaScript << 'EOS'\n$.NSUserDefaults.alloc.initWithSuiteName('com.apple.applicationaccess')\n .objectForKey('enforcedSoftwareUpdateDelay').js\nEOS\n)\n\nif [ -z \"$result\" ]; then\necho \"true\"\nelif [ \"$result\" -le 30 ]; then\necho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "1.8",
      "description": "Ensure the System is Managed by a Mobile Device Management (MDM) Software",
      "command": "sudo /usr/bin/profiles status -type enrollment | /usr/bin/awk -F: '/MDM enrollment/ {print $2}' | /usr/bin/grep -c \"Yes (User Approved)\"",
      "expected_output": "1"
    },
    {
      "recommend_id": "2.2.1",
      "description": "Ensure Firewall Is Enabled",
      "command": "/usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS\nfunction run() {\napp = Application.currentApplication()\napp.includeStandardAdditions = true;\n\n let pref1 = app.doShellScript('/usr/bin/defaults read /Library/Preferences/com.apple.alf globalstate')\n let pref2 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.security.firewall')\n .objectForKey('EnableFirewall'))\n\n if ( ( ( pref1 == 1 ) || ( pref1 == 2 ) || ( pref2 == \"true\" ) ) && (pref1 != 0 ) ) {\n return(\"true\")\n } else {\n return(\"false\")\n }\n\n}\nEOS",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.2.2",
      "description": "Ensure Firewall Stealth Mode Is Enabled",
      "command": "/usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS\nfunction run() {\nlet pref1 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.alf')\n .objectForKey('stealthenabled'))\n let pref2 = ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('com.apple.security.firewall')\n .objectForKey('EnableStealthMode'))\n if ( ( pref1 == 1 ) || ( pref2 == \"true\" ) ) {\n return(\"true\")\n } else {\n return(\"false\")\n }\n}\nEOS",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.3.1.1",
      "description": "Ensure AirDrop Is Disabled When Not Actively Transferring Files",
      "command": "/usr/bin/sudo /usr/bin/osascript -l JavaScript << 'EOS'\nfunction checkAirDrop() {\nlet userDefaults = $.NSUserDefaults.alloc.initWithSuiteName('com.apple.applicationaccess');\n let allowAirDrop = userDefaults.objectForKey('allowAirDrop');\n if (typeof allowAirDrop === 'undefined' || allowAirDrop === null || allowAirDrop.js !== true) {\nreturn 'false';\n} else {\nreturn 'true';\n}\n}\ncheckAirDrop();\nEOS",
      "expected_output": "false"
    },
    {
      "recommend_id": "2.3.1.2",
      "description": "Ensure AirPlay Receiver Is Disabled",
      "command": "/usr/bin/sudo /usr/bin/osascript -l JavaScript << 'EOS'\nfunction checkAirPlayIncomingRequests() {\nlet userDefaults = $.NSUserDefaults.alloc.initWithSuiteName('com.apple.applicationaccess');\n let allowAirPlayIncomingRequests = userDefaults.objectForKey('allowAirPlayIncomingRequests');\n if (typeof allowAirPlayIncomingRequests === 'undefined' || allowAirPlayIncomingRequests === null || allowAirPlayIncomingRequests.js !== true) {\nreturn 'false';\n} else {\nreturn 'true';\n}\n}\ncheckAirPlayIncomingRequests();\nEOS",
      "expected_output": "false"
    },
    {
      "recommend_id": "2.3.2.1",
      "description": "Ensure Set Time and Date Automatically Is Enabled",
      "command": "/usr/bin/sudo /usr/sbin/systemsetup -getusingnetworktime",
      "expected_output": "Network Time: On"
    },
    {
      "recommend_id": "2.3.2.2",
      "description": "Ensure Time Is Set Within Appropriate Limits",
      "command": "/usr/bin/sudo /usr/sbin/systemsetup -getnetworktimeserver | awk '{print $4}' | xargs -I {} /usr/bin/sudo /usr/bin/sntp {} | awk '{if ($1 >= -270 && $1 <= 270) print \"true\"; else print \"false\"}'",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.3.3.1",
      "description": "Ensure DVD or CD Sharing Is Disabled",
      "command": "/usr/bin/sudo /bin/launchctl list | grep -c com.apple.ODSAgent",
      "expected_output": "0"
    },
    {
      "recommend_id": "2.3.3.2",
      "description": "Ensure Screen Sharing Is Disabled",
      "command": "/usr/bin/sudo /bin/launchctl list | grep -c com.apple.screensharing",
      "expected_output": "0"
    },
    {
      "recommend_id": "2.3.3.3",
      "description": "Ensure File Sharing Is Disabled",
      "command": "/usr/bin/sudo /bin/launchctl list | grep -c \"com.apple.smbd\"",
      "expected_output": "0"
    },
    {
      "recommend_id": "2.3.3.4",
      "description": "Ensure Printer Sharing Is Disabled",
      "command": "/usr/bin/sudo /usr/sbin/cupsctl | grep -c \"_share_printers=0\"",
      "expected_output": "1"
    },
    {
      "recommend_id": "2.3.3.5",
      "description": "Ensure Remote Login Is Disabled",
      "command": " /usr/bin/sudo /usr/sbin/systemsetup -getremotelogin",
      "expected_output": "Remote Login: Off"
    },
    {
      "recommend_id": "2.3.3.6",
      "description": "Ensure Remote Management Is Disabled",
      "command": "if /usr/bin/sudo /bin/ps -ef | /usr/bin/grep -e ARDAgent | grep -v grep > /dev/null; then\necho \"false\"\nelse\necho \"true\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.3.3.7",
      "description": "Ensure Remote Apple Events Is Disabled",
      "command": "/usr/bin/sudo /usr/sbin/systemsetup -getremoteappleevents",
      "expected_output": "Remote Apple Events: Off"
    },
    {
      "recommend_id": "2.3.3.8",
      "description": "Ensure Internet Sharing Is Disabled",
      "command": "output=$(/usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS\n$.NSUserDefaults.alloc.initWithSuiteName('com.apple.MCX')\n.objectForKey('forceInternetSharingOff').js\nEOS\n)\n\nif [ -z \"$output\" ]; then\nenabledOutput=$(/usr/bin/sudo /usr/bin/defaults read /Library/Preferences/SystemConfiguration/com.apple.nat | awk '/Enabled/ {i++; if(i==2) print; }')\n\nif [[ $enabledOutput =~ \"Enabled = 1\" ]]; then\necho \"false\"\nelif [[ $enabledOutput =~ \"Enabled = 0\" ]]; then\necho \"true\"\nfi\nelse\n  echo \"$output\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.3.3.11",
      "description": "Ensure Bluetooth Sharing Is Disabled",
      "command": "output=$(/usr/bin/sudo -u $(whoami) /usr/bin/defaults -currentHost read com.apple.Bluetooth PrefKeyServicesEnabled 2>/dev/null)\n\nif [ -z \"$output\" ]; then\necho \"true\"\nelif [[ \"$output\" == \"0\" ]]; then\necho \"true\"\nelif [[ \"$output\" == \"1\" ]]; then\necho \"false\"\nelse\necho \"true\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.3.4.2",
      "description": "Ensure Time Machine Volumes Are Encrypted If Time Machine Is Enabled",
      "command": "/usr/bin/sudo /usr/bin/defaults read /Library/Preferences/com.apple.TimeMachine.plist | grep -c NotEncrypted",
      "expected_output": "0"
    },
    {
      "recommend_id": "2.4.1",
      "description": "Ensure Show Wi-Fi status in Menu Bar Is Enabled",
      "command": "output=$(/usr/bin/sudo -u $(whoami) /usr/bin/defaults -currentHost read com.apple.controlcenter.plist WiFi 2>/dev/null)\n\nif [ -z \"$output\" ]; then\necho \"true\"\nelif [[ \"$output\" == \"2\" ]]; then\necho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.4.2",
      "description": "Ensure Show Bluetooth Status in Menu Bar Is Enabled",
      "command": "output=$(/usr/bin/sudo -u $(whoami) /usr/bin/defaults -currentHost read com.apple.controlcenter.plist Bluetooth 2>/dev/null)\n\nif [ -z \"$output\" ]; then\necho \"true\"\nelif [[ \"$output\" == \"18\" ]]; then\necho \"true\"\nelse\necho \"false\"\nfi",
      "expected_output": "true"
    },
    {
      "recommend_id": "2.6.4",
      "description": "Ensure Limit Ad Tracking Is Enabled",
      "command": "output=$(/usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS\n$.NSUserDefaults.alloc.initWithSuiteName('com.apple.MCX')\n.objectForKey('forceInternetSharingOff').js\nEOS\n)\n\nif [ -z \"$output\" ]; then\nenabledOutput=$(/usr/bin/sudo -u $(whoami) /usr/bin/defaults read /Users/$(whoami)/Library/Preferences/com.apple.AdLib.plist allowApplePersonalizedAdvertising)\n\nif [[ $enabledOutput == \"0\" ]]; then\necho \"false\"\nelse\necho \"true\"\nfi\nelse\necho \"$output\"\nfi",
      "expected_output": "false"
    },
     {
      "recommend_id": "2.6.5",
      "description": "Ensure Gatekeeper Is Enabled",
      "command": "/usr/bin/sudo /usr/sbin/spctl --status",
      "expected_output": "assessments enabled"
    },
    {
      "recommend_id": "2.6.6",
      "description": "Ensure FileVault Is Enabled",
      "command": "/usr/bin/sudo /usr/bin/fdesetup status",
      "expected_output": "FileVault is On."
    },
    {
      "recommend_id": "2.6.8",
      "description": "Ensure an Administrator Password Is Required to Access System-Wide Preferences",
      "command": "authDBs=(\"system.preferences\" \"system.preferences.energysaver\"\n \"system.preferences.network\" \"system.preferences.printing\"\n \"system.preferences.sharing\" \"system.preferences.softwareupdate\"\n \"system.preferences.startupdisk\" \"system.preferences.timemachine\")\nresult=\"1\"\n\nfor section in \"${authDBs[@]}\"; do\nif [[ $(/usr/bin/sudo /usr/bin/security -q authorizationdb read \"$section\" | /usr/bin/xmllint -xpath 'name(//*[contains(text(), \"shared\")]/following-sibling::*[1])' -) != \"false\" ]]; then\nresult=\"0\"\nfi\ndone\n\necho $result\n",
      "expected_output": "1"
    }
  ],
  "MacOS Sonoma": [
  ]
}
